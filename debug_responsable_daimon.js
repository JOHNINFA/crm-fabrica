// üîç DEBUG ESPEC√çFICO PARA RESPONSABLE DAIMON
// Ejecutar en la consola del navegador para diagnosticar el problema

const debugResponsableDaimon = {
  
  // Verificar todas las fuentes de datos del responsable
  verificarTodasLasFuentes: () => {
    console.log('üîç ===== DEBUG RESPONSABLE DAIMON =====');
    
    const ids = ['ID1', 'ID2', 'ID3', 'ID4', 'ID5', 'ID6'];
    
    ids.forEach(id => {
      console.log(`\nüìã VERIFICANDO ${id}:`);
      
      // 1. responsableStorage (si est√° disponible)
      let responsableRS = null;
      try {
        if (typeof responsableStorage !== 'undefined') {
          responsableRS = responsableStorage.get(id);
        }
      } catch (error) {
        console.log(`   ‚ùå responsableStorage no disponible`);
      }
      
      // 2. localStorage directo
      const responsableLS = localStorage.getItem(`responsable_${id}`);
      
      // 3. localStorage alternativo
      const responsableAlt = localStorage.getItem(`cargue_responsable_${id}`);
      
      // 4. responsables_cargue
      let responsableFromCargue = null;
      const responsablesCargue = localStorage.getItem('responsables_cargue');
      if (responsablesCargue) {
        try {
          const parsed = JSON.parse(responsablesCargue);
          responsableFromCargue = parsed[id];
        } catch (error) {
          console.log(`   ‚ùå Error parsing responsables_cargue`);
        }
      }
      
      // Mostrar resultados
      console.log(`   1. responsableStorage.get("${id}"): "${responsableRS}"`);
      console.log(`   2. localStorage["responsable_${id}"]: "${responsableLS}"`);
      console.log(`   3. localStorage["cargue_responsable_${id}"]: "${responsableAlt}"`);
      console.log(`   4. responsables_cargue["${id}"]: "${responsableFromCargue}"`);
      
      // Determinar cu√°l deber√≠a usarse
      if (responsableRS && responsableRS !== 'RESPONSABLE') {
        console.log(`   ‚úÖ MEJOR OPCI√ìN: responsableStorage = "${responsableRS}"`);
      } else if (responsableLS && responsableLS !== 'RESPONSABLE') {
        console.log(`   ‚úÖ MEJOR OPCI√ìN: localStorage directo = "${responsableLS}"`);
      } else if (responsableAlt && responsableAlt !== 'RESPONSABLE') {
        console.log(`   ‚úÖ MEJOR OPCI√ìN: localStorage alternativo = "${responsableAlt}"`);
      } else if (responsableFromCargue && responsableFromCargue !== 'RESPONSABLE') {
        console.log(`   ‚úÖ MEJOR OPCI√ìN: responsables_cargue = "${responsableFromCargue}"`);
      } else {
        console.log(`   ‚ùå NO HAY RESPONSABLE V√ÅLIDO - usar√≠a "RESPONSABLE"`);
      }
    });
  },
  
  // Verificar espec√≠ficamente ID1 que deber√≠a tener DAIMON
  verificarID1: () => {
    console.log('\nüéØ ===== VERIFICACI√ìN ESPEC√çFICA ID1 =====');
    
    // Verificar qu√© se ve en la pantalla
    const elementoResponsable = document.querySelector('.responsable-title');
    if (elementoResponsable) {
      console.log(`üëÅÔ∏è Responsable visible en pantalla: "${elementoResponsable.textContent}"`);
    } else {
      console.log(`‚ùå No se encontr√≥ elemento .responsable-title en la pantalla`);
    }
    
    // Verificar todas las fuentes para ID1
    console.log('\nüìã FUENTES DE DATOS PARA ID1:');
    
    // responsableStorage
    let responsableRS = null;
    try {
      if (typeof responsableStorage !== 'undefined') {
        responsableRS = responsableStorage.get('ID1');
        console.log(`   responsableStorage.get("ID1"): "${responsableRS}"`);
      } else {
        console.log(`   responsableStorage: No disponible`);
      }
    } catch (error) {
      console.log(`   responsableStorage: Error - ${error.message}`);
    }
    
    // localStorage directo
    const responsableLS = localStorage.getItem('responsable_ID1');
    console.log(`   localStorage["responsable_ID1"]: "${responsableLS}"`);
    
    // localStorage alternativo
    const responsableAlt = localStorage.getItem('cargue_responsable_ID1');
    console.log(`   localStorage["cargue_responsable_ID1"]: "${responsableAlt}"`);
    
    // responsables_cargue
    const responsablesCargue = localStorage.getItem('responsables_cargue');
    if (responsablesCargue) {
      try {
        const parsed = JSON.parse(responsablesCargue);
        console.log(`   responsables_cargue["ID1"]: "${parsed.ID1}"`);
        console.log(`   responsables_cargue completo:`, parsed);
      } catch (error) {
        console.log(`   responsables_cargue: Error parsing - ${error.message}`);
      }
    } else {
      console.log(`   responsables_cargue: No existe en localStorage`);
    }
    
    // Verificar si DAIMON est√° en alg√∫n lado
    console.log('\nüîç BUSCANDO "DAIMON" EN LOCALSTORAGE:');
    let encontradoDaimon = false;
    
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      const value = localStorage.getItem(key);
      
      if (value && value.includes('DAIMON')) {
        console.log(`   ‚úÖ Encontrado en "${key}": "${value}"`);
        encontradoDaimon = true;
      }
    }
    
    if (!encontradoDaimon) {
      console.log(`   ‚ùå "DAIMON" no encontrado en ninguna clave de localStorage`);
    }
  },
  
  // Forzar guardar DAIMON en todas las ubicaciones
  forzarGuardarDaimon: () => {
    console.log('\nüöÄ ===== FORZANDO GUARDADO DE DAIMON =====');
    
    // Guardar en todas las ubicaciones posibles
    localStorage.setItem('responsable_ID1', 'DAIMON');
    localStorage.setItem('cargue_responsable_ID1', 'DAIMON');
    
    // Actualizar responsables_cargue
    let responsablesCargue = {};
    try {
      const existing = localStorage.getItem('responsables_cargue');
      if (existing) {
        responsablesCargue = JSON.parse(existing);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Error parsing responsables_cargue existente, creando nuevo');
    }
    
    responsablesCargue.ID1 = 'DAIMON';
    localStorage.setItem('responsables_cargue', JSON.stringify(responsablesCargue));
    
    // Usar responsableStorage si est√° disponible
    try {
      if (typeof responsableStorage !== 'undefined') {
        responsableStorage.set('ID1', 'DAIMON');
        console.log('‚úÖ Guardado con responsableStorage.set()');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è No se pudo usar responsableStorage:', error.message);
    }
    
    console.log('‚úÖ DAIMON guardado en todas las ubicaciones');
    console.log('üîÑ Ahora ejecuta debugResponsableDaimon.verificarID1() para verificar');
  },
  
  // Ejecutar todo el diagn√≥stico
  ejecutarTodo: () => {
    debugResponsableDaimon.verificarTodasLasFuentes();
    debugResponsableDaimon.verificarID1();
    
    console.log('\nüí° ===== RECOMENDACIONES =====');
    console.log('1. Si no ves "DAIMON" en ninguna fuente, ejecuta: debugResponsableDaimon.forzarGuardarDaimon()');
    console.log('2. Despu√©s de forzar, verifica con: debugResponsableDaimon.verificarID1()');
    console.log('3. Luego intenta el proceso de FINALIZAR nuevamente');
  }
};

// Hacer disponible globalmente
window.debugResponsableDaimon = debugResponsableDaimon;

console.log(`
üîç ===== DEBUG RESPONSABLE DAIMON CARGADO =====

Funciones disponibles:
‚Ä¢ debugResponsableDaimon.ejecutarTodo()           - Diagn√≥stico completo
‚Ä¢ debugResponsableDaimon.verificarID1()           - Verificar solo ID1
‚Ä¢ debugResponsableDaimon.forzarGuardarDaimon()    - Forzar guardado de DAIMON
‚Ä¢ debugResponsableDaimon.verificarTodasLasFuentes() - Ver todas las fuentes

Ejecuta primero:
debugResponsableDaimon.ejecutarTodo()
`);